{
  "_args": [
    [
      {
        "raw": "swarm-js@0.1.35",
        "scope": null,
        "escapedName": "swarm-js",
        "name": "swarm-js",
        "rawSpec": "0.1.35",
        "spec": "0.1.35",
        "type": "version"
      },
      "/Users/temisaniwere/Documents/Projects/cryptochicks/SmartSponsor/node_modules/web3/packages/web3-bzz"
    ]
  ],
  "_from": "swarm-js@0.1.35",
  "_id": "swarm-js@0.1.35",
  "_inCache": true,
  "_location": "/swarm-js",
  "_nodeVersion": "8.1.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/swarm-js-0.1.35.tgz_1501545758630_0.3538007230963558"
  },
  "_npmUser": {
    "name": "maiavictor",
    "email": "srvictormaia@gmail.com"
  },
  "_npmVersion": "5.0.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "swarm-js@0.1.35",
    "scope": null,
    "escapedName": "swarm-js",
    "name": "swarm-js",
    "rawSpec": "0.1.35",
    "spec": "0.1.35",
    "type": "version"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/swarm-js/-/swarm-js-0.1.35.tgz",
  "_shasum": "ff09ab92efce85ba56a31b1d7a3283e41308e649",
  "_shrinkwrap": null,
  "_spec": "swarm-js@0.1.35",
  "_where": "/Users/temisaniwere/Documents/Projects/cryptochicks/SmartSponsor/node_modules/web3/packages/web3-bzz",
  "author": {
    "name": "MaiaVictor"
  },
  "browser": "lib/api-browser.js",
  "bugs": {
    "url": "https://github.com/maiavictor/swarm-js/issues"
  },
  "dependencies": {
    "buffer": "^5.0.5",
    "decompress": "^4.0.0",
    "fs-extra": "^2.1.2",
    "fs-promise": "^2.0.0",
    "got": "^7.1.0",
    "mime-types": "^2.1.16",
    "mkdirp-promise": "^5.0.1",
    "mock-fs": "^4.1.0",
    "setimmediate": "^1.0.5",
    "tar.gz": "^1.0.5",
    "xhr-request-promise": "^0.1.2"
  },
  "description": "Swarm tools for JavaScript.",
  "devDependencies": {
    "babel-cli": "^6.24.1",
    "babel-preset-es2015": "^6.24.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-fwVjz/RoRV8/HoZHbbYjKHu+gCiXHrtUwbw0gxc0E1yQPjV5cEXzbCblbBJPzezcBEAbLDYPdMXkclbsW7aGhw==",
    "shasum": "ff09ab92efce85ba56a31b1d7a3283e41308e649",
    "tarball": "https://registry.npmjs.org/swarm-js/-/swarm-js-0.1.35.tgz"
  },
  "gitHead": "f42cef11109af65382aecf8077cbc6867d66637f",
  "homepage": "https://github.com/maiavictor/swarm-js#readme",
  "license": "MIT",
  "main": "lib/api-node.js",
  "maintainers": [
    {
      "name": "maiavictor",
      "email": "srvictormaia@gmail.com"
    }
  ],
  "name": "swarm-js",
  "optionalDependencies": {},
  "readme": "## Swarm.js\n\nThis library allows you to interact with the Swarm network from JavaScript.\n\n### Getting started\n\n1. Install\n\n    ```bash\n    npm install swarm-js\n    ```\n\n2. Import\n\n    ```javascript\n    // Loads the Swarm API pointing to the official gateway\n    const swarm = require(\"swarm-js\").at(\"http://swarm-gateways.net\");\n    ```\n\n### Examples\n\n#### Uploads\n\n- With JSON:\n\n    - Raw data:\n\n        ```javascript\n        const file = \"test file\"; // could also be an Uint8Array of binary data\n        swarm.upload(file).then(hash => {\n          console.log(\"Uploaded file. Address:\", hash);\n        })\n        ```\n\n    - Directory:\n\n        To upload a directory, just call `swarm.upload(directory)`, where directory is an object mapping paths to entries, those containing a mime-type and the data (a buffer).\n\n        ```javascript\n        const dir = {\n          \"/foo.txt\": {type: \"text/plain\", data: \"file 0\"},\n          \"/bar.txt\": {type: \"text/plain\", data: \"file 1\"}\n        };\n        swarm.upload(dir).then(hash => {\n          console.log(\"Uploaded directory. Address:\", hash);\n        });\n        ```\n\n- From disk:\n\n    - On Node.js:\n\n        ```javascript\n        swarm.upload({\n          path: \"/path/to/thing\",      // path to data / file / directory\n          kind: \"directory\",           // could also be \"file\" or \"data\"\n          defaultFile: \"/index.html\"}) // optional, and only for kind === \"directory\"\n          .then(console.log)\n          .catch(console.log);\n        ```\n\n    - On browsers:\n\n        ```javascript\n        // only works inside an event\n        document.onClick = function() {\n          swarm.upload({pick: \"file\"}) // could also be \"directory\" or \"data\"\n            .then(alert);\n        };\n        ```\n\n#### Downloads\n\n- With JSON:\n\n    - Raw data:\n\n        ```javascript\n        const fileHash = \"a5c10851ef054c268a2438f10a21f6efe3dc3dcdcc2ea0e6a1a7a38bf8c91e23\";\n        swarm.download(fileHash).then(buffer => {\n          console.log(\"Downloaded file:\", buffer.toString());\n        });\n        ```\n\n    - Directory:\n\n        ```javascript\n        const dirHash = \"7e980476df218c05ecfcb0a2ca73597193a34c5a9d6da84d54e295ecd8e0c641\";\n        swarm.download(dirHash).then(dir => {\n          console.log(\"Downloaded directory:\");\n          for (let path in dir) {\n            console.log(\"-\", path, \":\", dir[path].data.toString());\n          }\n        });\n        ```\n\n- To disk:\n\n    - On Node.js:\n\n        ```javascript\n        swarm.download(\"DAPP_HASH\", \"/target/dir\")\n          .then(path => console.log(`Downloaded DApp to ${path}.`))\n          .catch(console.log);\n        ```\n\n    - On browser:\n\n        (Just link the Swarm URL.)\n\n### More\n\nFor more examples, check out [examples](/examples).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/maiavictor/swarm-js.git"
  },
  "scripts": {
    "babel": "babel src --out-dir=lib",
    "build": "npm run bundle; npm run minify",
    "bundle": "browserify -d lib/swarm.js > examples/example_dapp_uploader/swarm.min.js",
    "minify": "ccjs examples/example_dapp_uploader/swarm.min.js > examples/example_dapp_uploader/swarm.min.js_; mv examples/example_dapp_uploader/swarm.min.js_ examples/example_dapp_uploader/swarm.min.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "0.1.35"
}
